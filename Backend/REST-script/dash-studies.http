### Environment Variables
@baseUrl = http://localhost:8000
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZjI5OTM1N2IzNmIzNGJhNmEwYzkzMCIsImlhdCI6MTc0NTI2NDQwMCwiZXhwIjoxNzQ3ODU2NDAwfQ.ciX4uOzQtZ13OVPP1EWO-VoESKOgCTYAyWd8QGE888c

### 1. Register a user (only needed first time)
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "username": "modesta123",
  "email": "modesta@hotmail.com",
  "password": "iloveChicken"
}

### 2. Login to get JWT token
# @name login
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "username": "bob",
  "password": "bob123"
}

### Store token from login response
@token = {{login.response.body.token}}

### 3. Get current user details (to verify token works)
GET {{baseUrl}}/api/auth/user
Authorization: Bearer {{token}}

### 4. Create a new study
# @name createStudy
POST {{baseUrl}}/api/studies
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "creator": "67e687a95b20fe02564cc98b",
  "title": "i love stratos",
  "description": "This is a test study created to test dashboard functionality",
  "published": false,
  "questions": [
    {
      "questionText": "What is your favorite color?",
      "questionType": "thumbs-up-down",
      "options": [
        {"value": "red", "label": "Red"},
        {"value": "blue", "label": "Blue"},
        {"value": "green", "label": "Green"},
        {"value": "yellow", "label": "Yellow"}
      ]
    },
    {
      "questionText": "Please rate your experience",
      "questionType": "numeric-rating",
      "options": [
        {"value": "1", "label": "1 - Poor"},
        {"value": "2", "label": "2 - Fair"},
        {"value": "3", "label": "3 - Average"},
        {"value": "4", "label": "4 - Good"},
        {"value": "5", "label": "5 - Excellent"}
      ]
    }
  ]
}

### 5. Get all studies (with pagination)
# @name getAllStudies
GET {{baseUrl}}/api/studies?page=1&limit=10&sortBy=createdAt&sortOrder=desc
Authorization: Bearer {{token}}

### 6. Store a study ID from the response
# After getting all studies, copy a study ID and paste it below
@studyId = 6822fe991e906826e76872c4

### 7. Get specific study details
GET {{baseUrl}}/api/studies/{{studyId}}
Authorization: Bearer {{token}}

### 8. Update study publish status
PATCH {{baseUrl}}/api/studies/{{studyId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "published": true
}

### 9. Generate link for the study (updated route)
GET {{baseUrl}}/api/studies/{{studyId}}/link
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "description": "Main recruitment channel"
}

### 10. Get all study links (new endpoint)
GET {{baseUrl}}/api/studies/{{studyId}}/links
Authorization: Bearer {{token}}

### 11. Get all responses for the study
GET {{baseUrl}}/api/studies/{{studyId}}/sessions/responses
Authorization: Bearer {{token}}

### 12. Send email invitations
POST {{baseUrl}}/api/studies/{{studyId}}/invitations
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "emails": [
    "domantas.daugela1@gmail.com"
  ]
}

### 13. Create a new question for the study
POST {{baseUrl}}/api/studies/{{studyId}}/questions
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "studyId": "{{studyId}}",
  "questionText": "Do you have any additional feedback?",
  "questionType": "single",
  "options": [
    {"value": "yes", "label": "Yes"},
    {"value": "no", "label": "No"}
  ]
}

### 14. Update link status (new endpoint)
# First get the linkId from the get links endpoint
@linkId = replace_with_actual_link_id
PATCH {{baseUrl}}/api/studies/{{studyId}}/links/{{linkId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "active": false
}

### 15. Delete the study
DELETE {{baseUrl}}/api/studies/{{studyId}}
Authorization: Bearer {{token}}

### 16. Verify the study was deleted
GET {{baseUrl}}/api/studies
Authorization: Bearer {{token}}